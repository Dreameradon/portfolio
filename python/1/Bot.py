import logging
import nest_asyncio
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import asyncio
from datetime import time, datetime

# –ó–∞–¥–∞–µ–º —Ç–æ–∫–µ–Ω
TOKEN = "7785736910:AAGL4dbNuxtY8JJtcDDb5PmH2isgZTJXw9I"

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    filename='bot_logs.log',
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
subscribed_users = set()

# –ö–æ–º–∞–Ω–¥—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = [
        [KeyboardButton("/schedule"), KeyboardButton("/idea")],
        [KeyboardButton("/events"), KeyboardButton("/help")],
        [KeyboardButton("/notify_on"), KeyboardButton("/notify_off")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ Minecraft. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:", reply_markup=reply_markup)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/schedule - —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π\n"
        "/idea - –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é\n"
        "/events - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≤–µ–Ω—Ç–∞—Ö\n"
        "/notify_on - –≤–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞\n"
        "/notify_off - –æ—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞\n"
    )

async def schedule_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    schedule_text = (
        "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥–µ–π—Ç–æ–≤:\n"
        "13:30 ‚Äî –ø–µ—Ä–≤—ã–π –≥–µ–π—Ç\n"
        "15:30 ‚Äî –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –≥–µ–π—Ç\n"
        "18:30 ‚Äî –≤—Ç–æ—Ä–æ–π –≥–µ–π—Ç\n"
    )
    await update.message.reply_text(schedule_text)

async def idea_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É –∏–¥–µ—é, –∏ —è –ø–µ—Ä–µ–¥–∞–º –µ—ë —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º.")

async def events_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    events_text = (
        "–ü–ª–∞–Ω –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –•—ç–ª–ª–æ—É–∏–Ω—É:\n"
        "üï∑Ô∏è –ù–∞ –≤—Ä–µ–º—è –Ω–µ–¥–µ–ª–∏ –•—ç–ª–ª–æ—É–∏–Ω–∞ –±—É–¥–µ—Ç –≤–∫–ª—é—á–µ–Ω –°–ø–∞—É–Ω –º–æ–±–æ–≤ (22.10.24)\n"
        "üõí –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –Ω–∞ –±–∞–∑–∞—Ö –∏–≥—Ä–æ–∫–æ–≤ –±—É–¥—É—Ç –ø–æ—è–≤–ª—è—Ç—å—Å—è —Å—É–Ω–¥—É–∫–∏ —Å —Ä–µ—Å—É—Ä—Å–∞–º–∏ –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –•—ç–ª–ª–æ—É–∏–Ω—É (21.10.24)\n"
        "‚ùáÔ∏è –°–ø–∞–≤–Ω –º–æ–±–æ–≤ —É—Å–∏–ª–∏—Ç—Å—è (30.10.24)\n"
        "üòà –ö–æ–Ω–∫—É—Ä—Å –Ω–∞ –ª—É—á—à–µ–µ —É–∫—Ä–∞—à–µ–Ω–∏–µ –±–∞–∑—ã –∫ –•—ç–ª–ª–æ—É–∏–Ω—É (31.10.24)\n"
    )
    await update.message.reply_text(events_text)

async def notify_on(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    subscribed_users.add(user_id)
    await update.message.reply_text("–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞.")

async def notify_off(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    subscribed_users.discard(user_id)
    await update.message.reply_text("–í—ã –æ—Ç–ø–∏—Å–∞–Ω—ã –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞.")

async def send_notifications(app: Application) -> None:
    notification_times = [time(13, 30), time(15, 30), time(18, 30)]
    while True:
        now = datetime.now().time()
        if any(now.hour == t.hour and now.minute == t.minute for t in notification_times):
            for user_id in subscribed_users:
                await app.bot.send_message(chat_id=user_id, text="–°–µ—Ä–≤–µ—Ä –æ—Ç–∫—Ä—ã–ª—Å—è!")
            await asyncio.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        await asyncio.sleep(30)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥

async def main() -> None:
    app = Application.builder().token(TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("schedule", schedule_command))
    app.add_handler(CommandHandler("idea", idea_command))
    app.add_handler(CommandHandler("events", events_command))
    app.add_handler(CommandHandler("notify_on", notify_on))
    app.add_handler(CommandHandler("notify_off", notify_off))

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    app.create_task(send_notifications(app))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await app.initialize()
    await app.run_polling()

if __name__ == '__main__':
    nest_asyncio.apply()
    try:
        asyncio.run(main())
    except RuntimeError as e:
        if 'already running' in str(e):
            asyncio.run(main())
